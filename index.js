const {
    getModule,
    messages: { sendBotMessage }
} = require("powercord/webpack");
const { get } = require("powercord/http");
const { Plugin } = require("powercord/entities");
const { inject, uninject } = require("powercord/injector");

const ruEnMap = {
    –∞: "a",
    –±: "b",
    –≤: "v",
    –≥: "g",
    –¥: "d",
    –µ: "e",
    —ë: "e",
    –∂: "zh",
    –∑: "z",
    –∏: "i",
    –π: "i",
    –∫: "k",
    –ª: "l",
    –º: "m",
    –Ω: "n",
    –æ: "o",
    –ø: "p",
    —Ä: "r",
    —Å: "s",
    —Ç: "t",
    —É: "u",
    —Ñ: "f",
    —Ö: "h",
    —Ü: "c",
    —á: "ch",
    —à: "sh",
    —â: "sh",
    —ä: "!",
    —ã: "i",
    —å: "'",
    —ç: "e",
    —é: "u",
    —è: "ya",
    –ê: "A",
    –ë: "B",
    –í: "V",
    –ì: "G",
    –î: "D",
    –ï: "E",
    –Å: "E",
    –ñ: "ZH",
    –ó: "Z",
    –ò: "I",
    –ô: "I",
    –ö: "K",
    –õ: "L",
    –ú: "M",
    –ù: "N",
    –û: "O",
    –ü: "P",
    –†: "R",
    –°: "S",
    –¢: "T",
    –£: "U",
    –§: "F",
    –•: "H",
    –¶: "C",
    –ß: "CH",
    –®: "SH",
    –©: "SH",
    –™: "!",
    –´: "I",
    –¨: "'",
    –≠: "E",
    –Æ: "U",
    –Ø: "YA"
};
const keyboardMap = {
    "`": "—ë",
    "@": '"',
    "#": "‚Ññ",
    $: ";",
    "^": ":",
    "&": "?",
    "|": "/",
    "~": "–Å",
    /*  */ q: "–π",
    w: "—Ü",
    e: "—É",
    r: "–∫",
    t: "–µ",
    y: "–Ω",
    u: "–≥",
    i: "—à",
    o: "—â",
    p: "–∑",
    "[": "—Ö",
    "]": "—ä",
    /*  */ Q: "–ô",
    W: "–¶",
    E: "–£",
    R: "–ö",
    T: "–ï",
    Y: "–ù",
    U: "–ì",
    I: "–®",
    O: "–©",
    P: "–ó",
    "{": "–•",
    "}": "–™",
    /*  */ a: "—Ñ",
    s: "—ã",
    d: "–≤",
    f: "–∞",
    g: "–ø",
    h: "—Ä",
    j: "–æ",
    k: "–ª",
    l: "–¥",
    ";": "–∂",
    "'": "—ç",
    /*  */ A: "–§",
    S: "–´",
    D: "–í",
    F: "–ê",
    G: "–ü",
    H: "–†",
    J: "–û",
    K: "–õ",
    L: "–î",
    ":": "–ñ",
    '"': "–≠",
    /*  */ z: "—è",
    x: "—á",
    c: "—Å",
    v: "–º",
    b: "–∏",
    n: "—Ç",
    m: "—å",
    ",": "–±",
    ".": "—é",
    "/": ".",
    /*  */ Z: "–Ø",
    X: "–ß",
    C: "–°",
    V: "–ú",
    B: "–ò",
    N: "–¢",
    M: "–¨",
    "<": "–ë",
    ">": "–Æ",
    "?": ","
};

function ruToEn(text) {
    return text
        .split("")
        .map(m => ruEnMap[m] || m)
        .join("");
}

function parseArgs(args) {
    const parsedArgs = {};
    for (var k in args) {
        parsedArgs[k] = args[k][0].text.trim();
    }
    return parsedArgs;
}

const ciphers = [
    {
        name: "keyboard",
        description: "–†–∞—Å–∫–ª–∞–¥–∫–∞",
        execute: function (args) {
            return args.text
                .split("")
                .map(
                    m =>
                        (encode !== "true"
                            ? keyboardMap[m]
                            : (Object.entries(keyboardMap).find(
                                  v => v[1] == m
                              ) || [m])[0]) || m
                )
                .join("");
        },
        options: [
            {
                name: "encode",
                description: "–ù—É–∂–Ω–æ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å?",
                type: 3,
                choices: [
                    { name: "true", value: "true" },
                    { name: "false", value: "false" }
                ]
            },
            {
                name: "text",
                description: "–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
                type: 3,
                required: true
            }
        ]
    }
];

module.exports = class ClownTranslate extends Plugin {
    async startPlugin() {
        const getGuild = (await getModule(["getGuild"])).getGuild;
        const sectionsModule = await getModule(["getGuildSections"]);
        const autocompleteModule = await getModule(["AUTOCOMPLETE_OPTIONS"]);
        const clownEmoji = (
            await getModule(["filterUnsupportedEmojis", "getURL"])
        ).getURL("ü§°");
        const parse = (await getModule(["parse", "parseTopic"])).parse;

        if (getGuild("584321061437571072")) {
            let extend;
            try {
                extend = require("./ciphers.js");
            } catch {
                powercord.api.notices.sendToast("clownTranslate-noCiphers", {
                    header: "–ê –≥–¥–µ –º–æ–¥—É–ª—å?",
                    content: parse(
                        "–ù–∏–∫–∞–∫–∏—Ö —à–∏—Ñ—Ä–æ–≤ –Ω–µ –±—É–¥–µ—Ç, –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∞—á–∞–µ—à—å –º–æ–¥—É–ª—å –∏–∑ <#694792497481646230>"
                    ),
                    image: location.origin + clownEmoji,
                    buttons: [
                        {
                            text: "–ü–æ–Ω—è–ª",
                            look: "filled",
                            color: "green"
                        }
                    ]
                });
            }
            extend && extend(ciphers, ruToEn);
        }
        inject(
            "clownTranslate-autocomplete-getSections",
            sectionsModule,
            "getGuildSections",
            function (args, res) {
                return [].concat(res, [
                    {
                        icon: location.origin + clownEmoji,
                        id: "clownTranslate",
                        name: "–¢–æ—Ç —Å–∞–º—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫"
                    }
                ]);
            }
        );
        inject(
            "clownTranslate-autocomplete-getSection",
            sectionsModule,
            "getGuildSection",
            function (args, res) {
                if (args[1] == "clownTranslate")
                    return {
                        icon: location.origin + clownEmoji,
                        id: "clownTranslate",
                        name: "–¢–æ—Ç —Å–∞–º—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫"
                    };
                return res;
            }
        );
        inject(
            "clownTranslate-autocomplete-queryResults",
            autocompleteModule.AUTOCOMPLETE_OPTIONS.COMMANDS,
            "queryResults",
            (args, res) => {
                return {
                    commands: [].concat(
                        res.commands,
                        ciphers
                            .filter(c => c.name.match(new RegExp(args[1])))
                            .map(c =>
                                Object.assign({}, c, {
                                    applicationId: "clownTranslate",
                                    execute: (args, location) => {
                                        const result = c.execute(
                                            parseArgs(args),
                                            location
                                        );
                                        if (result)
                                            sendBotMessage(
                                                location.channel.id,
                                                result
                                            );
                                    },
                                    id: "clownTranslate-" + c.name,
                                    type: 0
                                })
                            )
                    )
                };
            }
        );
    }

    pluginWillUnload() {
        uninject("clownTranslate-autocomplete-getSections");
        uninject("clownTranslate-autocomplete-getSection");
        uninject("clownTranslate-autocomplete-queryResults");
    }
};
